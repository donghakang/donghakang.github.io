{"pageProps":{"frontMatter":{"title":"GraphQL 맛보기 👅","author":"Dongha Kang","date":"2022-02-16","tag":["GraphQL"]},"slug":"graphql","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      strong: \"strong\",\n      p: \"p\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.h1, {\n        children: [\"🤡 \", _jsx(_components.strong, {\n          children: \"GraphQL\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GraphQL은 API를 위한 쿼리 언어이며, 서버측 런타임으로 클라이언트에게 요청한 만큼의 데이터를 제공하는 데 우선 순위를 둔다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"기존에 사용하는 REST Api 같은 경우, GET/POST/DELETE/UPDATE와 같은 명령어로 하나하나 통신을 보내고 받고 하는 반면에, GraphQL은 통신 뿐만아니라 직접 Query를 넣어서 필요한 데이터만 불러오고 사용할 수 있다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"즉, GraphQL은 웹 클라이언트가 데이터를 서버로부터 효율적으로 가져오는 Query 언어이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"장점\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"HTTP 요청의 횟수를 줄일 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"RESTful 은 각 Resource 종류 별로 요청을 해야하고, 따라서 요청 횟수가 필요한 Resource 의 종류에 비례한다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"반면 GraphQL 은 원하는 정보를 하나의 Query 에 모두 담아 요청하는 것이 가능하다.\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"HTTP 응답의 Size 를 줄일 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"RESTful 은 응답의 형태가 정해져있고, 따라서 필요한 정보만 부분적으로 요청하는 것이 힘들다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"반면 GraphQL 은 원하는 대로 정보를 요청하는 것이 가능하다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"단점\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"File 전송 등 Text 만으로 하기 힘든 내용들을 처리하기 복잡하다.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"고정된 요청과 응답만 필요할 경우에는 Query 로 인해 요청의 크기가 RESTful API 의 경우보다 더 커진다.\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"재귀적인 Query 가 불가능하다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"REST 와 얼마나 다르길래 ?\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"REST API는 GET, DELETE, POST, PUT 을 사용하여 백엔드와 데이터를 주고 받는다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"간단한 예시로, 저자와 책에 관련된 데이터가 있고, 그 통신을 프론트엔드에서 실행시킬시 아래와 같다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: _jsx(_components.strong, {\n          children: \"REST API\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"/authors                    ➡️ 저자의 정보를 다 가져온다\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"[\\n  {\\n    id: 1,\\n    name: Dongha Kang,\\n    age: 28,\\n    ...\\n  },\\n  {\\n    id: 2,\\n    ...\\n  }\\n]\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위의 예시만 봤었을때는 REST API의 큰 문제는 없다 하지만 더 세부적인 정보들을 가져올 시 문제가 생길 수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"/authors/:id/books          ➡️ 저자의 데이터를 불러오고 id를 찾고, id의 맞는 책을 가져온다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이럴 시에 불필요한 통신이 생긴다, authors, id, books 정보를 전부 다 가져오기 때문에 REST API의 단점이 될 수 있다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"즉, 오직 저자만 찾고 싶을때도 불구하고 REST Api는 불필요한 책 정보도 전부다 가져와야한다.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: _jsx(_components.strong, {\n          children: \"GraphQL\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"GraphQL같은 경우 불필요한 통신없이 원하는 데이터만 query를 사용해서 건져 낼수 있다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-graphql\",\n          children: \"query {\\n  authors {\\n    name\\n    books {\\n      name\\n    }\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위와 같은 예시는 저자의 이름과 그가 쓴 책들의 이름만 쏙 빼올 수 있다. query만 잘 쓴다면 필요한 데이터만 가져올 수 있어서 통신 시간을 최소화 시킬수 있다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"Installation\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm i graphql\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아래의 예시를 돌리기 위해서 추가적인 다운로드도 진행한다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm i express express-graphql\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"Query\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Query는 Database로부터 데이터를 단순히 받는 것.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"server.js 와 같은 예시를 보면\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-graphql\",\n          children: \"query {\\n  authors {\\n    id\\n    name\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"와 같은 query는\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"data\\\": {\\n    \\\"authors\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"J. K. Rowling\\\"\\n      },\\n      {\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"J. R. R. Tolkien\\\"\\n      },\\n      {\\n        \\\"id\\\": 3,\\n        \\\"name\\\": \\\"Brent Weeks\\\"\\n      }\\n    ]\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아래와 같은 데이터를 돌려준다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"### Mutation\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"REST API에서 POST DELETE UPDATE 와 같은 데이터 변경은 Mutation으로 진행이된다. server.js 에서 확인을 해보고 아래 예시는 결과 값만 보여준다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-graphql\",\n          children: \"mutation {\\n  addBook(name: \\\"Dongha Kang\\\", authorId: 1) {\\n    id\\n    name\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"더 자세한 정보들은 공부를 더 하면서 수정할 계획이다. (20220216)\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}