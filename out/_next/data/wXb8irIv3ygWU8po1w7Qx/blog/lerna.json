{"pageProps":{"frontMatter":{"title":"Lerna, Spring boot 🌱","author":"Dongha Kang","date":"2021-11-05","tag":["JavaScript","Spring Boot","React"]},"slug":"lerna","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      h3: \"h3\",\n      strong: \"strong\",\n      a: \"a\",\n      h2: \"h2\",\n      em: \"em\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"오늘 해본 것\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"블로그에서 navigate에 absolute 경로로 바꾸어서 실제 블로그 포스트 안에서도 카테고리를 골라볼 수 있도록 설정 해보았다.\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"import { navigate } from \\\"@reach/router\\\"\\n\\n...\\nnavigate(`/blog?tag=${key}`)\\n...\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"솔직히 오늘은 블로그는 많이 못하고 .. Lerna와 Spring framework, 그리고 postgresql에 대해서 더 많이 찾아본것 같다...  그러므로 오늘 배운것에 더 많이 글을 써보겠다!\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"오늘 배운 것\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Lerna\"\n      }), \"\\n\", _jsx(\"aside\", {\n        children: _jsxs(_components.p, {\n          children: [\"💡 lerna 란,\\n다양한 레포지토리를 사용할 시, 불편하고 더러운 코드를 정리해주며. 또한, Babel, React, Angular, Ember, 등 다양한 다중 패키지 리포지토리를 한개의 리포지토리로 변환 해줄때 유용하게 쓰이는 도구 입니다.\\n즉, \", _jsx(_components.strong, {\n            children: \"git/ npm 을 사용하여 다중 패키지 리포지토리를 관리하는 작업을 최적화 해주는 도구 입니다.\"\n          })]\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Lerna에 대한 모든 것\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"@\", _jsx(_components.a, {\n              href: \"https://github.com/ahmadawais/lerna-tutorial\",\n              children: \"https://github.com/ahmadawais/lerna-tutorial\"\n            })]\n          }), \"\\n\", _jsx(_components.h2, {\n            children: \"Why Lerna?\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"한 개의 Git 프로젝트에서 여러개의 git project를 사용해야 하는 경우가 있었을 것이다. 혹은 한개의 프로젝트안에 여러개의 리포지토리가 생성이 되는 경우도 있었을 것이다.\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"그럴때, git submodule을 사용 한 경험이 있을것이다. git submodule 또한 엄청나게 유용하게 쓰이지만, 같은 repository 에 한 개의 branch만 사용이 가능했었고, 그것을 트랙킹 하거나 약간의 불편함을 개선하기 위해 Mono-repo로 만들어버리는 작업을 실시하기 위해 Lerna를 사용하면 좋다.\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"proj\\n├── repo1\\n│   ├── node_modules\\n│   └── package.json\\n├── repo2\\n│   ├── node_modules\\n│   └── package.json\\n├── repo3\\n│   ├── node_modules\\n│   └── package.json\\n├── package.json\\n└── lerna.json\\n\"\n            })\n          }), \"\\n\", _jsx(_components.h2, {\n            children: \"Getting Started\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-bash\",\n              children: \"npm install --global lerna\\n\\nlerna init\\n\"\n            })\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"아래와 같이 lerna를 설치 한 후에는 lerna.json 이라는 configuration 파일이 생성이 됩니다.\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"lerna.conf 파일 안에는 아래와 같은 코드가 있다.\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"// lerna.json (not an initial code)\\n{\\n  \\\"version\\\": \\\"independent\\\",\\n  \\\"packages\\\": [\\\"extensions/*\\\", \\\"platform/*\\\"],\\n  \\\"npmClient\\\": \\\"yarn\\\",\\n  \\\"useWorkspaces\\\": true,\\n  \\\"command\\\": {\\n  \\\"publish\\\": {\\n    \\\"ignoreChanges\\\": [\\\"*.md\\\", \\\"*.yml\\\", \\\"*.spec.js\\\", \\\"*.test.js\\\"],\\n    \\\"message\\\": \\\"chore(release): publish\\\"\\n  },\\n  \\\"version\\\": {\\n    \\\"allowBranch\\\": \\\"master\\\",\\n    \\\"conventionalCommits\\\": true,\\n    \\\"createRelease\\\": \\\"github\\\",\\n    \\\"yes\\\": true,\\n    \\\"message\\\": \\\"chore(release): publish [skip ci]\\\"\\n  }\\n  }\\n}\\n\"\n            })\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.em, {\n                children: \"packages\"\n              }), \": 다른 package.json 이 있는 상위 폴더\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.em, {\n                children: \"npmClient\"\n              }), \": 어떤 tool로 build 할 것인지 (후에 yarn workspace를 애용할 예정이니, 개인적으로 yarn이 좋다)\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.em, {\n                children: \"useWorkspaces:\"\n              }), \" yarn workspace 도 같이 쓰기 위해 true 로 설정한다.\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsx(_components.h2, {\n            children: \"lerna bootstrap\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"각각의 package.json 에 있는 dependency에 npm install을 해서 설치를 해주는 작업이 바로 lerna bootstrap 이다.\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"**\", _jsx(_components.code, {\n              children: \"lerna bootstrap —hoist\"\n            }), \"**라는 옵션도 추가해 준다면 공통되는 모듈을 루트의 node_modules로 올려서 설치하고, 각각의 패키지가 다른 버전의 외부 디펜던시를 사용하면 제일 많이 사용되는 버전이 호이스팅이 되며 경고 또한 보여집니다. 이로 인해 저장 공간이 줄고, 종속성 설치시간이 감소되며, 동일한 pkg 버전을 사용할 수 있습니다.\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"만약 설치가 잘못될 시, \", _jsx(_components.code, {\n              children: \"**lerna clean\"\n            }), \"** 을 사용하여 package의 모든 node_modules 를 삭제할 수 있습니다.\"]\n          }), \"\\n\", _jsx(_components.h2, {\n            children: \"그 외의 lerna 명령어\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"lerna version\"\n              }), \" : 마지막 git commit 과 현재 패키지의 버전의 차이점을 보여줍니다.\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"lerna publish\"\n              }), \": 패키지를 레지스트리에 배포합니다\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"lerna run\"\n              }), \": 패키지 package.json안에 명시되어있는 스크립트를 실행합니다. (learn run dev)\"]\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Spring boot — Jpa — Postgres\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Spring에 대하여\"\n          }), \"\\n\", _jsx(_components.h2, {\n            children: \"Why Spring boot ?\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"Spring Framework는 자바 기반의 Backend server framework 이고 _____\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"Spring Boot는 Spring Framework의 더 업그레이드 (?) 된 버전 이며, 간단하게 \", _jsx(_components.a, {\n              href: \"http://start.spring.io\",\n              children: \"start.spring.io\"\n            }), \" 에서 initialize 한뒤, run을 함으로서 바로 api를 실행 시킬 수 있는 강점이 있다. 또한, Spring Framework 보다 코드도 더 단순해 진다.\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-bash\",\n              children: \"backend/src/main/java/com/example/backend\\n├── BackendApplication.java\\n└── student\\n  ├── Student.java\\n  ├── StudentConfig.java\\n  ├── StudentController.java\\n  ├── StudentRepository.java\\n  └── StudentService.java\\n\"\n            })\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"BackendApplication.java\"\n              }), \": 가장 기본적인 java start 코드 이며, 이 코드를 실행시키면 코드가 시작된다.\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"Student.java\"\n              }), \": Entity 클래스\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"StudentController.java\"\n              }), \": Get, Post, Insert, Update 커맨드를 받는 컨트롤러 클래스 이다\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"StudentService.java\"\n              }), \": Business 로직을 가지고 있는 클래스 이다. 흔히 StudentServiceImpl 라는 다른 클래스로 나누기도 한다. \", _jsx(_components.a, {\n                href: \"https://www.tutorialspoint.com/spring_boot/spring_boot_service_components.htm\",\n                children: \"링크\"\n              })]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"StudentRepository.java\"\n              }), \": 나의 예시 같은경우 \", _jsx(_components.code, {\n                children: \"JpaRepository<T, ID>\"\n              }), \" 를 이용하여 실제 데이터 베이스와 연결 시켜주는 클래스 이다.\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [_jsx(_components.code, {\n                children: \"StudentConfig.java\"\n              }), \": 본인 같은경우 commandLineRunner를 여기에다가 집어넣었는데, Spring의 다양한 설정을 코드상에서 할 수 있게 해준다. (Bean)\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsx(_components.h3, {\n            children: \"📝 Code\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"Student.java\"\n                })\n              }), \"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-bash\",\n                  children: \"package com.example.backend.student;\\n\\nimport java.time.LocalDate;\\nimport javax.persistence.*;\\n\\n// To connect with database\\n@Entity\\n@Table\\npublic class Student {\\n  // annotation to connect with database\\n  @Id\\n  @SequenceGenerator(\\n    name = \\\"student_sequence\\\",\\n    sequenceName = \\\"student_sequence\\\",\\n    allocationSize = 1\\n  )\\n  @GeneratedValue(\\n    strategy = GenerationType.SEQUENCE,\\n    generator = \\\"student_sequence\\\"\\n  )\\n\\n  private Long id;\\n  private String name;\\n  private String email;\\n  private String text;\\n  private LocalDate date;\\n  // @Transient       --> no need to be the column in the database.\\n  //                      this will calculate the age for us.\\n  // private Integer age;\\n\\n  // public Integer getAge() {\\n  //     return Period.between(this.dob, LocalDate.now()).getYears();\\n  // }\\n\\n  public Student() {\\n  }\\n\\n  public Student( String name, String email, String text, LocalDate date) {\\n\\n    this.name = name;\\n    this.email = email;\\n    this.text = text;\\n    this.date = date;\\n  }\\n\\n  public Student(Long id, String name, String email, String text, LocalDate date) {\\n    this.id = id;\\n    this.name = name;\\n    this.email = email;\\n    this.text = text;\\n    this.date = date;\\n  }\\n\\n    // getter setter goes here...\\n\\n}\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"StudentController.java\"\n                })\n              }), \"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-jsx\",\n                  children: \"package com.example.backend.student;\\n\\nimport java.time.LocalDate;\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\n@RestController\\n@RequestMapping(path=\\\"api/v1/post\\\")\\npublic class StudentController {\\n  \\n  private final StudentService studentService;\\n\\n  @Autowired\\n  public StudentController(StudentService studentService) {\\n    this.studentService = studentService;\\n  }\\n\\n    // GET \\n  @GetMapping \\n  public List<Student> getAllStudents() {\\n    return studentService.getAllStudents();\\n  }\\n}\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"StudentService.java\"\n                })\n              }), \"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-jsx\",\n                  children: \"package com.example.backend.student;\\n\\nimport java.util.List;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\n\\n// @Component\\n@Service\\npublic class StudentService {\\n\\n  private final StudentRepository studentRepository;\\n\\n  @Autowired\\n  public StudentService(StudentRepository studentRepository) {\\n    this.studentRepository = studentRepository;\\n  }\\n\\n  public List<Student> getAllStudents() {\\n    return studentRepository.findAll();\\t\\t// --> returns list for us.\\n\\n    // return List.of(new Student(1L, \\\"Dongha Kang\\\", \\\"dkang0602@gmail.com\\\", \\\"# HELLO WORLD \\\", LocalDate.of(2021, 9, 30) ));\\n  }\\n}\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"StudentRepository.java\"\n                })\n              }), \"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-jsx\",\n                  children: \"package com.example.backend.student;\\n\\nimport org.springframework.data.jpa.repository.JpaRepository;\\nimport org.springframework.stereotype.Repository;\\n\\n// JpaRepository<T, ID>\\n// interface is responsible for data access\\n@Repository\\npublic interface StudentRepository extends JpaRepository<Student, Long>{\\n  // nothing goes here for now\\n}\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\", _jsxs(_components.li, {\n              children: [\"\\n\", _jsx(_components.p, {\n                children: _jsx(_components.code, {\n                  children: \"StudentConfig.java\"\n                })\n              }), \"\\n\", _jsx(_components.pre, {\n                children: _jsx(_components.code, {\n                  className: \"language-jsx\",\n                  children: \"package com.example.backend.student;\\n\\nimport java.time.LocalDate;\\nimport java.util.List;\\n\\nimport org.springframework.boot.CommandLineRunner;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\n\\n@Configuration\\npublic class StudentConfig {\\n  \\n  @Bean\\n  CommandLineRunner commandLineRunner(StudentRepository studentRepository) {\\n    return args -> {\\n       Student dongha = new Student(1L, \\\"Dongha Kang\\\", \\\"dkang0602@gmail.com\\\", \\\"# HELLO WORLD \\\", LocalDate.of(2021, 9, 30) ); \\n\\n       studentRepository.saveAll(List.of(dongha));\\n    };\\n  }\\n}\\n\"\n                })\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsx(_components.h1, {\n            children: \"내일 할 것 ?\"\n          }), \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"📝 Postgresql 에 Markdown 파일이 들어가는지 혹은 긴 markdown text가 들어가는지 확인해볼것이다\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"🎨 Postgresql에 이미지는 어떻게 넣는지, 아니 그냥 .md 파일 자체를 넣으면 좋을 것 같다.\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}