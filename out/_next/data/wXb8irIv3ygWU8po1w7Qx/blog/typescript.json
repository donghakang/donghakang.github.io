{"pageProps":{"frontMatter":{"title":"👨🏻‍🔬 Intro to TypeScript","author":"Dongha Kang","date":"2021-10-30","tag":["TypeScript","React"]},"slug":"typescript","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      strong: \"strong\",\n      blockquote: \"blockquote\",\n      p: \"p\",\n      em: \"em\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"What is TypeScript?\"\n        })\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: _jsx(_components.em, {\n            children: \"TypeScript is JavaScript superset.\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"A language building up on JavaScript to give more features and more advantages.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"However, TypeScript Can't be executed like JavaScript in browser. TypeScript will compile to JavaScript\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"TypeScript has a \", _jsx(_components.strong, {\n            children: \"type\"\n          }), \" feature on top of the JavaScript :arrow_right: can find error earlier and make code cleaner\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"Why TypeScript?\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"// javascript\\n\\nfunction add(num1, num2) {\\n  return num1 + num2;\\n}\\n\\nconsole.log(add('2', '3'))\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Since, those '2', '3' are string, the return value is '23'. However, the user might wanted '5'.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"With \", _jsx(_components.strong, {\n          children: \"TypeScript\"\n        }), \" we can specify the type of the values and make sure that code is working properly.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.em, {\n          children: \"Also,\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Types\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Non-JavaScript features like Interfaces or Generics\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Next-generation JavaScript features (compiled down for older Browsers)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Meta-Programming features (decorators)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Rich configuration options\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Modern tooling that helps even in non-TypeScript projects\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"Install\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"npm install -g typescript\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: _jsx(_components.strong, {\n          children: \"Compile\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"tsc helloworld.ts\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Example\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"//javascript\\nconst button = document.querySelector(\\\"button\\\");\\nconst input1 = document.getElementById(\\\"num1\\\");\\nconst input2 = document.getElementById(\\\"num2\\\");\\n\\n// the input's type is number\\nfunction add(num1, num2) {\\n  return num1 + num2;\\n}\\n\\nbutton.addEventListener(\\\"click\\\", function () {\\n  console.log(add(input1.value, input2.value));\\n});\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"// typescript\\nconst button = document.querySelector(\\\"button\\\");\\nconst input1 = document.getElementById(\\\"num1\\\")! as HTMLInputElement; // ! ==> this will never be null\\n                                   // as HTMLInputElement ==> type is HTMLInputElement\\nconst input2 = document.getElementById(\\\"num2\\\")! as HTMLInputElement; \\n\\n// the input's type is number\\nfunction add(num1: number, num2: number) {\\n  return num1 + num2;\\n}\\n\\nbutton.addEventListener(\\\"click\\\", function () {\\n  console.log(add(+input1.value, +input2.value));\\n});\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: _jsx(_components.strong, {\n            children: \"It forces us to write cleaner and better code !\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For more info ... \", _jsx(_components.a, {\n          href: \"https://github.com/donghakang/practice-typescript\",\n          children: \"Click here\"\n        })]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}