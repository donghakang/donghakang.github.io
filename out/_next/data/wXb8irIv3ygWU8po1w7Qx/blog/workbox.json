{"pageProps":{"frontMatter":{"title":"Workbox📦 ?","author":"Dongha Kang","date":"2022-03-08","tag":["workbox","Service Worker"]},"slug":"workbox","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      img: \"img\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"PWA 란\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"전에 포스트를 했듯이, PWA는 Progressive Web App으로서 standalone 어플리케이션 처럼 만들 수 있는 웹기능 중 하나이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Service Worker란\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"PWA가 standalone으로 사용할 수 있는 가장 큰 이유 중 하나는 service worker인데, service worker는 browser뒤에서 실행가능한 javascript 파일이며, network 인터셉션, 캐시 저장 및 불러오기, 푸시 알림 같은 기능을 실행시킬수 있는 기술이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Workbox ?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Service worker를 더 잘 활용 할 수 있도록 Google에서 만든 library 이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"🔨 Installation\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npm install workbox-cli -g\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"workbox-cli는 workbox를 실행해주는 커맨드고, -g 태그를 넣어서 어느 곳에서도 사용할 수 있도록 global하게 다운로드 해주는 커맨드 입니다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"⚙️ Setup\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"workbox를 제대로 쓰기전에 프로젝트는 있어야 할 거 같으니.. 프로젝트를 만들어보자\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npx create-react-app <project name> --template cra-template-pwa\\nnpx create-react-app <project name> --template cra-template-pwa-typescript\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 프로젝트를 보게 된다면 \", _jsx(_components.code, {\n          children: \"unregister\"\n        }), \"를 \", _jsx(_components.code, {\n          children: \"register\"\n        }), \"로 바꾸고 빌드를 해주자.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"// src/index.js\\n\\nserviceWorkerRegistration.register();\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"yarn run build\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이제 workbox를 실행시켜보자\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"workbox wizard\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"커맨드대로 대답을 해주자\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \">> workbox wizard\\n? What is the root of your web app (i.e. which directory do you deploy)? build/\\n? Which file types would you like to precache? json, ico, png, txt, js, css, svg\\n? Where would you like your service worker file to be saved? build/service-worker.js\\n? Where would you like to save these configuration options? workbox-config.js\\n? Does your web app manifest include search parameter(s) in the 'start_url', other than 'utm_' or 'fbclid' (like '?source=pwa')\\n? No\\nTo build your service worker, run\\n\\n  workbox generateSW workbox-config.js\\n\\nas part of a build process. See https://goo.gl/fdTQBf for details.\\nYou can further customize your service worker by making changes to workbox-config.js. See https://goo.gl/gVo87N for details.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이제 workbox를 실행 시켜보자\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"workbox generateSW workbox-config.js\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"저 커맨드를 실행시키면, workbox 서비스 워커들이 만들어지고 build폴더에 있는 파일들이 캐시할 준비를 합니다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이제 serve -s build 를 사용해서 정적 웹사이트를 보게 된다면 ...\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/img/workbox.png\",\n          alt: \"Workbox 예시\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"제대로 Cache와 service worker가 작동 되는 것을 알 수 있다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"웬만한 workbox recipes들은 \", _jsx(_components.a, {\n          href: \"https://developers.google.com/web/tools/workbox/guides/common-recipes\",\n          children: \"여기\"\n        }), \"에서 확인 하자.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"recipe들을 변경한 이후는 \", _jsx(_components.code, {\n          children: \"workbox injectManifest worker-config.js\"\n        }), \" 를 돌려주자\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}