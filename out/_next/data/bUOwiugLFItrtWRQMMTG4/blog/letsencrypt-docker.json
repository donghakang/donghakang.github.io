{"pageProps":{"frontMatter":{"title":"Let's Encrypt + Docker 🐳 + NginX","author":"Dongha Kang","date":"2022-01-20","tag":["SSL","https","docker","nginx"]},"slug":"letsencrypt-docker","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      pre: \"pre\",\n      code: \"code\",\n      strong: \"strong\",\n      h3: \"h3\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"⚠ 여기서 부터는 지극히 나의 프로젝트 구조이다 보니 다른 구조로 진행 하는 방법도 무조건 있을 것이다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"하지만 이것은 나의 구조이고 ... 작동 한다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"👷🏼‍♂️ 프로젝트 구조\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"project\\n├── docker-local\\n│   ├── docker-compose.yml    # docker 실행 파일\\n│   ├── openresty             # lua-script가 있는 nginx라고 생각하면된다.\\n│   └── postgresql            # db\\n├── server                    # fastapi를 이용한 백엔드\\n│   ├── Dockerfile\\n│   ├── app\\n│   ├── requirements.txt\\n│   └── runserver.py\\n└── client                    # 웹 코딩\\n    ├── src\\n    ├── node_modules\\n    └── package.json\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"docker-local\"\n        }), \" 폴더 안에 docker-compose 를 실행시키면, server 같은 경우, \", _jsx(_components.code, {\n          children: \"tiangolo/uvicorn-gunicorn:python3.8\"\n        }), \"을 이용해서 fastapi 를 실행하는 Dockerfile을 실행시키고, postgresql 는 \", _jsx(_components.code, {\n          children: \"postgres:13.2\"\n        }), \" 이미지를 실행시킨다. (지금 context와는 별로 안중요...)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"client 같은 경우는 build한 폴더를 나중에 docker를 이용, nginx를 사용해서 같이 실행시킬 예정이며 다른 docker image들도 nginx.conf (openresty 폴더안에 위치)안 proxy_pass로 연결 해준다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여기서 포인트는 \", _jsx(_components.code, {\n          children: \"nginx.conf\"\n        }), \" 안에 인증서를 넣을 계획이다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"⚙️ 셋업\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"지난번 포스트 처럼 재갱신을 진행하게 된다면, \", _jsx(_components.code, {\n          children: \"/root/.acme.sh/my-domain/\"\n        }), \" 안에는 이미 다 .cer .key 등 인증서 파일들이 저장이 되어있을 것이다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그것을 나같은 경우 openresty 폴더 안에 복사를 했다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"openresty\\n├── Dockerfile\\n├── certs\\n│   └── my-domain\\n│       └── all .cer and .key files\\n├── logs\\n└── nginx.conf\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"저 .cer .key 파일들을 docker을 이용하여, container안으로 모실 계획이다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"우선 \", _jsx(_components.code, {\n          children: \"docker-compose.yml\"\n        }), \" 이다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"version: \\\"3.7\\\"\\n\\nservices:\\n  openresty:\\n  build:\\n    context: ./openresty\\n    dockerfile: ./Dockerfile\\n  image: openresty\\n  container_name: openresty\\n  volumes:\\n    - ./openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro\\n    - ./openresty/logs:/var/log/nginx\\n    - ./openresty/certs:/usr/local/openresty/nginx/certs\\n    - .../client/dist:/usr/local/openresty/nginx/html/www\\n    ...\\n  ...\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"Dockerfile\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"FROM openresty/openresty:alpine-fat\\n\\nRUN mkdir /var/log/nginx\\n\\nRUN apk add --no-cache openssl-dev\\nRUN apk add --no-cache git\\nRUN apk add --no-cache gcc\\n\\nRUN luarocks install lua-resty-openidc\\n\\nENTRYPOINT [ \\\"/usr/local/openresty/nginx/sbin/nginx\\\", \\\"-g\\\", \\\"daemon off;\\\" ]\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Dockerfile 같은 경우 특별 한 것은 없다. 그냥 nginx가 돌아갈 공간을 만들어주는 정도...\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"docker-compose.yml 에는 certs를 특정 volume에다가 복사를 할 준비를 하고 있다. certs 뿐만아니라, client nginx.conf 도 volume안으로 넣는다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"nginx.conf\"\n        }), \"같은 경우, server 에서 인증 받은 정보를 불러와야한다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"server {\\n    listen 443 ssl http2;\\n    server_name my-domain;\\n\\n    ssl_protocols TLSv1.2 TLSv1.3;\\n    ssl_certificate     /usr/local/openresty/nginx/certs/my-domain/my-domain.cer;\\n    ssl_certificate_key /usr/local/openresty/nginx/certs/my-domain/my-domain.key;\\n\\n    access_log /usr/local/openresty/nginx/logs/my-domain.access.log;\\n    error_log  /usr/local/openresty/nginx/logs/my-domain.error.log;\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"🧘🏿‍♂️  짚고가기\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"nginx.conf 가 열리면 port 443이 열리고 (80으로 설정하는것이 가장 기본적) ssl, http2 를 확인하고 ssl 이 있었기 때문에 ssl_certificate을 확인한다. 저 ssl_certificate의 위치는 **docker container (openresty)**안에 \", _jsx(_components.code, {\n          children: \"/usr/local/openresty/nginx/certs/my-domain\"\n        }), \" 안에 있고 그 위치로 옮기게 도와준 것은 docker-compose.yml 에 \", _jsx(_components.code, {\n          children: \"./openresty/certs:/usr/local/openresty/nginx/certs\"\n        }), \" 을 읽어서 이다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이제, \", _jsx(_components.code, {\n          children: \"docker-compose up —build\"\n        }), \"를 실행하고 결과를 확인해보자!\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}