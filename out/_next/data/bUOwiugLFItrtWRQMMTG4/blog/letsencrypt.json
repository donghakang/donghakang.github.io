{"pageProps":{"frontMatter":{"title":"Let's Encrypt 와 acme.sh 사용하기","author":"Dongha Kang","date":"2022-01-20","tag":["SSL","https"]},"slug":"letsencrypt","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h2: \"h2\",\n      p: \"p\",\n      ol: \"ol\",\n      li: \"li\",\n      a: \"a\",\n      strong: \"strong\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h2, {\n        children: \"💁🏻‍♂️ Let’s Encrypt란?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"기본적으로 https를 웹에 사용하기 위해서는, CA (Certified Authority)로 부터 인증서를 발급 받아야하는데, Let’s Encrypt는 CA라고 생각하면된다. Let’s Encrypt가 차별화 되는 이유는 대부분의 인증서가 유료인 반면, let’s encrypt는 무료라는 장점이 있다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"😒 단점..\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"domain validated SSL certificate 이다 보니, 그 웹사이트를 개발한 사람에 대한 정보를 저장하지 않아서 만약 virus나 악성코드가 있다면 누가 그 나쁜짓을 했는지 추적하기가 어렵다.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"인증서 유효기간이 짧다, 하지만 자동 갱신 설정도 있다는것. 그래도 docker를 사용한다면 한번 씩 build를 다시 해줘야 한다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"한개의 웹사이트만 지원된다. 예를들어 \", _jsx(_components.a, {\n            href: \"http://www.website.com\",\n            children: \"www.website.com\"\n          }), \" 이 있고 blog.website.com이 있다면 따로 2개의 웹사이트로 만들어야하며 두개의 인증을 받아야한다\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"꽁짜인거 치고는 괜찮다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"SSL Ceritficate을 재갱신하는데는 \", _jsx(_components.a, {\n          href: \"http://acme.sh\",\n          children: \"acme.sh\"\n        }), \" 를 사용할 예정이다. \", _jsx(_components.strong, {\n          children: \"acme.sh\"\n        }), \"는 아주 쉽고 빠르게 ssl certificate을 갱신/재발급 해준다.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"🚀 Installation\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"본인은 centos/mac 환경에서 진행했다.\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"우선 certbot, Let’s encrypt를 다운받는다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"sudo apt-get install certbot # centos\\nbrew install certbot # macos\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"http://acme.sh\",\n          children: \"acme.sh\"\n        }), \" 도 다운 받는다\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"curl https://get.acme.sh | sh -s email=my@example.com         # curl\\nwget -O -  https://get.acme.sh | sh -s email=my@example.com   # wget\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"다운 받고, bash나 zsh에 alias로 \", _jsx(_components.a, {\n          href: \"http://acme.sh\",\n          children: \"acme.sh\"\n        }), \" 를 설정 해준다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"alias acme.sh=~/.acme.sh/acme.sh    # 맥 환경, centos는 root계정에 추가된다.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"✨ 인증서 생성\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"본인 같은 경우는 좀 다르게 port 80를 사용할 수 없었다. 그래서 \", _jsx(_components.a, {\n          href: \"https://jmorahan.net/articles/lets-encrypt-without-port-80/\",\n          children: \"여기\"\n        }), \"를 참고했다. 우선, 그것을 배제하고 원래대로라면 아래와 같이 인증서를 생성한다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"acme.sh --issue --dns -d <my domain>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"각 상황 별로 \", _jsx(_components.code, {\n          children: \"—dns\"\n        }), \" 가 \", _jsx(_components.code, {\n          children: \"—webroot\"\n        }), \", \", _jsx(_components.code, {\n          children: \"—nginx\"\n        }), \"등 다양한 flag가 필요할 수 도 있으니, 그에 알맞는 flag를 넣어서 인증서를 생성해보자. \", _jsx(_components.a, {\n          href: \"https://github.com/acmesh-official/acme.sh\",\n          children: \"여기\"\n        }), \"를 참고하자\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"여기 까지 다 완료가 되었다면 /root/.acme.sh 라는 폴더가 생성이 되었을 것이고, 그와 동시에 \", _jsx(_components.code, {\n          children: \"/root/.acme.sh/<my domain>\"\n        }), \" 이라는 폴더도 생성 되었으며, 그 안에 실행 후 폴더를 확인해보면 \", _jsx(_components.code, {\n          children: \"<url>.cer\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<url>.key\"\n        }), \", \", _jsx(_components.code, {\n          children: \"ca.cer\"\n        }), \", \", _jsx(_components.code, {\n          children: \"fullchain.cer\"\n        }), \" 등 다양한 certificate 파일들이 생성이 되었을 것이다. 이렇게 되면 갱신이 완료 되었으며, \", _jsx(_components.code, {\n          children: \"service nginx start\"\n        }), \" 으로 nginx service가 시작이 된다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"재갱신 같은 경우\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"acme.sh --renew -d <my domain>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"를 실행 시키면 알아서 폴더에 저장이된다. 실행 후 폴더를 확인해보면 \", _jsx(_components.code, {\n          children: \"<url>.cer\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<url>.key\"\n        }), \", \", _jsx(_components.code, {\n          children: \"ca.cer\"\n        }), \", \", _jsx(_components.code, {\n          children: \"fullchain.cer\"\n        }), \" 등 다양한 certificate 파일들이 생성이 되었을 것이다. 이렇게 되면 갱신이 완료 되었으며, \", _jsx(_components.code, {\n          children: \"service nginx start\"\n        }), \" 으로 nginx service가 시작이 된다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}