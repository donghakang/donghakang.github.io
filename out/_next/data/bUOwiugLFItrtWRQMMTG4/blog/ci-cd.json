{"pageProps":{"frontMatter":{"title":"CI/CD와 Unit Testing","author":"Dongha Kang","date":"2021-11-18","tag":["CI/CD","Unit Testing"]},"slug":"ci-cd","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      p: \"p\",\n      h2: \"h2\",\n      pre: \"pre\",\n      code: \"code\",\n      hr: \"hr\",\n      strong: \"strong\",\n      blockquote: \"blockquote\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"CI/CD란 ?\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"CI (Continuous Integration): 지속적인 통합, 새로운 코드 변경 사항이 정기적으로 빌드 및 테스트 되어 공유 레포지토리에 통합되는 것을 의미 합니다.\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"다수의 개발자가 커밋과 빌드/테스트/병합을 지속적으로 사용하며 공유하여 사용하는 환경\"\n            }), \"\\n\", _jsx(_components.li, {\n              children: \"작은 기능/서비스/컴포넌트 별로 나누어서 개발하는 환경 (Agile)\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"CD (Continuous Delivery/Deployment): 지속적인 서비스 제공 / 지속적인 서비스 배포\", \"\\n\", _jsxs(_components.ul, {\n            children: [\"\\n\", _jsx(_components.li, {\n              children: \"개발자의 변경 사항들을 레포지토리 뿐만 아니라 프로덕션 환경까지 배포 되는 것\"\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"결국 DevOps의 영역은 맞지만 어째 나는 Fullstack이 되려하는 사람 아닌가.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"아무튼\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Github Actions\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"CI/CD의 예시로는 많은 플랫폼이 있다. Jenkins, Travis CI, Circle Ci 등등... 하지만 나는 제일 새로운 Github의 기능인 Github Actions를 사용하려 한다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Github Actions는 Github 자체에서 개발한 CI/CD 도구라고 생각하면 되고 Github 저장소를 사용하며 소프트웨어 개발 흐름 (workflow)를 정해서 자동화 해주는 도구라고 생각하시면 됩니다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-yaml\",\n          children: \"# Github actions 예제\\n\\nname: CI\\n\\n# Controls when the workflow will run\\non:\\n  # Triggers the workflow on push or pull request events but only for the master branch\\n  push:\\n  branches: [ master ]\\n  pull_request:\\n  branches: [ master ]\\n\\n  # Allows you to run this workflow manually from the Actions tab\\n  workflow_dispatch:\\n\\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\\njobs:\\n  # This workflow contains a single job called \\\"build\\\"\\n  build:\\n  # The type of runner that the job will run on\\n  runs-on: ubuntu-latest\\n\\n  # Steps represent a sequence of tasks that will be executed as part of the job\\n  steps:\\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\\n    - uses: actions/checkout@v2\\n\\n    # Runs a single command using the runners shell\\n    - name: Run a one-line script\\n    run: echo Hello, world!\\n\\n    # Runs a set of commands using the runners shell\\n    - name: Run a multi-line script\\n    run: |\\n      echo Add other actions to build,\\n      echo test, and deploy your project.\\n\"\n        })\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h1, {\n        children: \"테스트란?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"테스트는 코드가 잘 작동이 되는지 안되는지를 확인하는 것을 일컫는데, 리액트 같은 경우에는 컴포넌트에 버튼이 잘 눌리는지, 키보드 입력이 잘되는지 일일히 확인하는것이 아니라 미리 만들어 놓는 테스트 코드를 돌려서 코드가 잘 작동되는지 자동화 작업을 하는 것을 말한다. 이는 테스트 자동화이다.\"\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"유닛 테스트 / 통합 테스트\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"유닛 테스트는 제일 기본적이고 작은 단위의 테스팅이다\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"컴포넌트가 잘 렌더링 되는가?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"컴포넌트의 특정 함수를 실행하면 원하는 상태로 바뀌는가?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"리덕스의 액션 생성 함수가 액션 객체를 잘 만들어 내는가?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"리덕스의 리듀서 상태와 액션 객체를 넣어서 호출하면 새로운 상태를 잘 만들어 주는가?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"등, 컴포넌트와 리덕스의 테스팅을 여기에서 유닛 테스팅을 이용하여 확인하면 좋다.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"통합테스트는 기능들이 전체적으로 잘 작동하는지 확인하는 전체적인 테스팅이다.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"여러 컴포넌트들이 렌더링도 잘 되고 서로 상호작용을 잘 하고 있는가\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"DOM 이벤트를 발생 시켰을때 UI 변화가 잘 이루어 지는가 ?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"리덕스와 연동된 컨테이너 컴포넌트의 DOM 특정 이벤트를 발생시켰을때 원하는 액션이 잘 디스패치 되는가?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"리액트 테스팅 방법\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"우선 create-react-app을 하면 제일 기본적인 테스팅은 dependencies로 package.json에 저장이 된다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"@testing-library/jest-dom       # jest를 이용한 테스팅\\n@testing-library/react          # 리액트 테스팅\\n@testing-library/user-event\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"본인 같은 경우 처음으로 snapshot이라는 테스팅 기술도 알게되었는데, 그 것을 사용하려면 따로 \", _jsx(_components.code, {\n          children: \"react-test-renderer\"\n        }), \"를 install 해야한다.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"예를 들어 \", _jsx(_components.strong, {\n          children: \"Button\"\n        }), \" 이라는 컴포넌트를 만들었다고 가정하며 그 Button이라는 컴포넌트가 잘 작동이 되는지 테스트를 할 때 폴더 스트럭쳐는 이렇게 된다\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"components\\n└── button\\n  ├── __test__               # __test__ 폴더 생성\\n  │   └── button.test.js     # jest로 테스트 할때는 항상 폴더 이름이 이런식으로 쓰여야한다.\\n  ├── button.css\\n  └── button.js\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"기본적인 테스팅\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"button.test.js 을 한번 살펴 보면...\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"import React from \\\"react\\\";\\nimport { render } from \\\"@testing-library/react\\\";\\n\\nit ('renders without crashing', () => {\\n    render( <Button /> )\\n})\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"it\"\n          }), \" : 제일 많이 쓰이는 것은 \", _jsx(_components.code, {\n            children: \"describe, it, test\"\n          }), \" 이 세 가지 인것 같다. 이 커맨드는 테스트를 한개로 감싸주는 역할을 하는데 특히 \", _jsx(_components.code, {\n            children: \"describe\"\n          }), \" 은 큰 그룹을 묶어 주고, \", _jsx(_components.code, {\n            children: \"it\"\n          }), \"는 테스트를 뜻한다. 즉 미래에 더 복잡한 테스팅에서는 \", _jsx(_components.code, {\n            children: \"describe\"\n          }), \"안에 여러개의 \", _jsx(_components.code, {\n            children: \"it\"\n          }), \"를 넣어도 좋다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"'renders without crashing'\"\n          }), \" : 테스트 이름이라고 생각하면 된다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"() ⇒ { ... }\"\n          }), \" : 테스트 코드\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"위 코드는 Button 이라는 컴포넌트가 제대로 렌더링 되는지 안되는지 테스팅 하는 코드이다. 작은 컴포넌트 하나만 테스팅 하기 때문에 Unit Testing 이다.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"랜더링 접근 방식\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"렌더링된 요소를 접근 하는 방법은  query를 사용하는 방법인데 이는  3가지가 있다\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"getBy: (\", _jsx(_components.code, {\n            children: \"getByTestId\"\n          }), \", \", _jsx(_components.code, {\n            children: \"getByText\"\n          }), \", \", _jsx(_components.code, {\n            children: \"getByRole\"\n          }), \") 동기적으로 실행되며 DOM 안에 이가 있는지 확인.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"findBy: 비동기적으로 실행되며 요소를 찾을때까지 기다리고 그 후에도 찾을 수 없으면 에러\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"queryBy: getBy와 비슷하지만 에러를 발생시키지 않고 안에 없으면 null 로 리턴한다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"먼저 button.js 를 업데이트 해보자\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"import React from \\\"react\\\";\\nimport './button.css';\\n\\nfunction Button({ label }) {\\n  return <div data-testid=\\\"button\\\">{label}</div>;\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"위에 코드처럼 작성 할 시 test 할 때 간단히 \", _jsx(_components.code, {\n          children: \"getByTestId('button')\"\n        }), \" 을 이용하여 접근 할 수 있다.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"it(\\\"renders button correctly 1\\\", () => {\\n  const { getByTestId } = render(<Button label=\\\"click me please\\\"></Button>);\\n\\n  // if I get test id button, it should have \\\"click me please\\\"\\n  expect(getByTestId('button')).toHaveTextContent(\\\"click me please\\\")\\n})\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"getByTestId 는 최악의 상황에서만 사용하고 사용자들이 더 접근을 많이 하는 순으로 제대로 testing 을 하는 priority 규칙이 있는데 이것은 \", _jsx(_components.a, {\n            href: \"https://testing-library.com/docs/queries/about/#priority\",\n            children: \"여기를 참고\"\n          }), \"하자\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Snapshot\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"스냅샷은 테스팅의 한 방식인데 좀 신기하고 해서 여기에 담는다.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"it (\\\"matches snapshot\\\", () => {\\n  const tree = renderer.create(<Button label=\\\"save\\\"></Button>).toJSON();\\n  expect(tree).toMatchSnapshot();\\n});\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"이 테스트를 실행할시 현재 디렉토리에서 \", _jsx(_components.code, {\n          children: \"__snapshot__\"\n        }), \" 이라는 디렉토리가 생성되고, 그안에 \", _jsx(_components.code, {\n          children: \"button.test.js.snap\"\n        }), \"이라는 코드가 생성이된다.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"그 파일을 열어보면...\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"// Jest Snapshot v1, https://goo.gl/fbAQLP\\n\\nexports[`matches snapshot 1`] = `\\n<div\\n  className=\\\"button-style\\\"\\n  data-testid=\\\"button\\\"\\n>\\n  save\\n</div>\\n`;\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"이런 코드가 생성이 된다. 이건 실제 렌더링 되는 코드가 되는데, 나중에 테스트 할때 변경사항이 있거나 렌더링이 잘 못되거나 일치하지 않다면 에러가 발생한다.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"업데이트 하는데에도 새로운 방식이 있는데 이것은 나중에 이 \", _jsx(_components.a, {\n          href: \"https://jestjs.io/docs/snapshot-testing\",\n          children: \"링크\"\n        }), \"에 더 자세히 설명 되어있다.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}