{"pageProps":{"frontMatter":{"title":"React에서 class와 functional component","author":"Dongha Kang","date":"2021-11-10","tag":["React"]},"slug":"class-functional","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      blockquote: \"blockquote\",\n      p: \"p\",\n      h2: \"h2\",\n      strong: \"strong\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"종종 React 에서 class component를 사용하는 코드를 본적도 있고, function 을 사용해서 컴포넌트를 제작하는 것도 본적이있다. 둘 다 실행은 되지만 요새는 functional 컴포넌트를 사용하여 hook과 함께 react를 사용하는 장면을 많이 목격하는데, 어떤것이 더 좋고 어떤것이 더 비효율적인지, 그리고 어떤 차이점이 있는지 알아보자.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"😓 당연히 다른것 ?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"둘 다,\"\n        }), \" JSX로 rendering이 되며, html 코드를 javascript안에 탑재하면서 컴포넌트를 만드는 형식이다 ... 하지만 여러개가 다른데...\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"컴포넌트는 React.Component라는 라이브러리에서 class를 define 한다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"class component는 \", _jsx(_components.code, {\n            children: \"render()\"\n          }), \"라는 함수를 꼭 불러야하고 그 함수 안에서 html 코드들을 실행시킨다. functional component는 return 안에다가 탑재 한다.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"class component는 class 사용하기 때문에 \", _jsx(_components.code, {\n            children: \"this\"\n          }), \" 도 자주 나타나는 편이다.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"functional component는 데이터를 자식 컴포넌트에 패스할때, props를 필수 적으로 선언 해야한다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"functional component에게는 hook을 쓰면서 state 와 lifecycle 메소드를 관리해야하고 class 같은 경우는 \", _jsx(_components.code, {\n            children: \"componentDidMount\"\n          }), \", \", _jsx(_components.code, {\n            children: \"componentDidUnmount\"\n          }), \"등 과 같은 함수로 lifecycle을 관리한다.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"class App extends React.Component {\\n  render() {\\n    return <div>...</div>;\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"const App = () => {\\n  return <div>...</div>;\\n};\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Arrow function과 그냥 function 무엇을 사용해야할까?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"우선 둘 다 된다. 하지만 두 function간에는 미세한 차이가 있지 않을까 ?\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"function hello(what) {\\n  return `Hello, ${what}`;\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-jsx\",\n          children: \"const hello = (what) => `Hello, ${what}`;\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"arrow function 같은 경우 때에 따라서 return을 생략해도 된다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"자바스크립트에서 함수를 호출 할 때 함수가 어떻게 되었는지에 따라서 \", _jsx(_components.code, {\n            children: \"this\"\n          }), \"가 바인딩할 객체를 동적으로 결정하는데, 그로 인해 function 안에 function을 만드는게 어렵다.\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}