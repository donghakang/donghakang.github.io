/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, forwardRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useSpring } from "@react-spring/core";
import { a } from "@react-spring/three";
import { MetalMaterial } from "./MetalMaterial";

function Model(props, ref) {
  const { nodes } = useGLTF("/macbook.gltf");
  const [active, setActive] = useState(false);

  const { rotateY } = useSpring({
    rotateY: active ? 0 : 0.12,
    config: { mass: 3, tension: 1000, friction: 50, precision: 0.0001 },
  });

  return (
    <a.mesh
      ref={ref}
      {...props}
      dispose={null}
      geometry={nodes.Object_4001.geometry}
      material={nodes.Object_4001.material}
      scale={3.53}
      rotation-y={rotateY}
      onPointerOver={() => setActive(false)}
      onPointerOut={() => setActive(true)}
    >
      <meshPhongMaterial color={props.color} />
    </a.mesh>
  );
}

export default forwardRef(Model);

useGLTF.preload("/macbook.gltf");
